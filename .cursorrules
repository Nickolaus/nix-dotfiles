# Nix-Dotfiles Configuration Rules

This repository contains a cross-platform Nix configuration using nix-darwin, Home Manager, and SOPS for secret management. Follow these rules when making changes.

## Architecture Overview

```
├── flake.nix                    # Main flake configuration
├── hosts/                      # System-specific configurations
│   └── zoidberg/               # macOS system configuration
├── modules/                    # Reusable system modules
└── home/                       # User-level configuration
    ├── default.nix             # Main entry point (imports ./features)
    ├── zoidberg.nix             # User-specific config
    └── features/                # Feature modules
        ├── default.nix          # Feature orchestrator
        ├── packages.nix         # Cross-platform packages
        ├── darwin/              # macOS-specific features
        ├── linux/               # Linux-specific features
        ├── editors/             # Editor configurations
        ├── terminals/           # Terminal configurations
        └── development/         # Development tools
```

## Core Principles

### 1. Two-Layer Import Rule
- Main configs (`home/default.nix`) import only second layer (`./features`)
- Second layer (`home/features/default.nix`) imports all feature modules
- This prevents deep import chains and maintains clarity

### 2. Files vs Folders
- **Simple configurations**: Use single `.nix` files
- **Complex features**: Use folders with `default.nix` entry points
- Always provide `default.nix` for folders to maintain consistent imports

### 3. Platform Separation
- **Cross-platform**: `home/features/packages.nix`, shared modules
- **macOS-specific**: `home/features/darwin/` (GUI apps, system integrations)
- **Linux-specific**: `home/features/linux/` (desktop environments, Linux tools)

### 4. Conditional Logic Pattern
- NEVER use `pkgs.stdenv.isDarwin` in `imports` sections (causes infinite recursion)
- Use `lib.mkIf pkgs.stdenv.isDarwin` within module content
- Always import platform modules unconditionally, condition their content

## How to Add Features

### Adding Cross-Platform CLI Tools
Add to `home/features/packages.nix` in the appropriate emoji-categorized section:

```nix
# 🛠️ DEVELOPMENT ENVIRONMENT
ripgrep
fd
# ... existing tools
```

### Adding macOS-Specific GUI Applications
Add to `home/features/darwin/packages.nix`:

```nix
# 💻 DEVELOPMENT ENVIRONMENTS & IDEs
jetbrains.phpstorm
code-cursor
your-new-app
```

### Adding Linux-Specific Applications
Add to `home/features/linux/packages.nix`:

```nix
# 🌐 BROWSERS & WEB TOOLS
firefox
chromium
your-new-browser
```

### Creating New Feature Modules

1. **Simple feature** (single file):
```nix
# home/features/your-feature.nix
{ pkgs, lib, ... }:
{
  programs.your-tool = {
    enable = true;
    # configuration
  };
}
```

2. **Complex feature** (folder):
```nix
# home/features/your-feature/default.nix
{ ... }:
{
  imports = [
    ./config.nix
    ./keybindings.nix
  ];
}
```

3. **Update feature orchestrator**:
```nix
# home/features/default.nix
{
  imports = [
    # ... existing imports
    ./your-feature        # for folders
    ./your-feature.nix     # for files
  ];
}
```

## Package Organization

### Categories with Emoji Headers
Use these standardized categories for organizing packages:

**Cross-platform** (`packages.nix`):
- 🛠️ DEVELOPMENT ENVIRONMENT
- 🔒 SECURITY & ENCRYPTION
- ⚙️ SYSTEM UTILITIES
- ☁️ CLOUD & INFRASTRUCTURE
- 🐳 CONTAINER & VIRTUALIZATION
- 🔧 LANGUAGES & RUNTIMES
- 📝 VERSION CONTROL & DOCUMENTATION
- 🧪 TESTING & QUALITY ASSURANCE
- 🏢 ENTERPRISE & COLLABORATION

**macOS-specific** (`darwin/packages.nix`):
- 💬 COMMUNICATION & COLLABORATION
- 🤖 AI & PRODUCTIVITY TOOLS
- 💻 DEVELOPMENT ENVIRONMENTS & IDEs
- 🎨 DESIGN & CREATIVE TOOLS
- 📱 MOBILE DEVELOPMENT
- 🛠️ SYSTEM UTILITIES

**Linux-specific** (`linux/packages.nix`):
- 🌐 BROWSERS & WEB TOOLS
- 💬 COMMUNICATION & COLLABORATION
- 💻 DEVELOPMENT ENVIRONMENTS & IDEs
- 🖥️ DESKTOP ENVIRONMENT & WINDOW MANAGERS
- 🎨 DESIGN & CREATIVE TOOLS

## System Configuration

### Adding System-Level Features
Create modules in `modules/` and import them in `hosts/zoidberg/default.nix`:

```nix
# modules/your-system-feature.nix
{ pkgs, lib, ... }:
{
  system.defaults.your-setting = value;
}
```

### macOS System Preferences
Configure in `hosts/zoidberg/darwin-configuration.nix`:

```nix
system.defaults = {
  dock.autohide = true;
  # ... other settings
};
```

## SOPS Secret Management

### Adding New Secrets
1. Edit secrets file: `sops secrets/secrets.yaml`
2. Reference in configuration:
```nix
sops.secrets."your-secret" = {
  path = "/path/to/secret";
  owner = "your-user";
};
```

### Secret Integration
- Secrets defined in `hosts/zoidberg/secrets.nix`
- Age key path: `~/.config/sops/age/keys.txt`
- Always encrypt before committing

## Testing and Validation

### Before Committing
```bash
# Validate configuration
nix flake check

# Test build without applying
nix build .#darwinConfigurations.zoidberg.system --dry-run

# Apply changes
sudo darwin-rebuild switch --flake ~/.config/nix-dotfiles/
```

### Common Issues
- **Infinite recursion**: Check for `pkgs.stdenv.isDarwin` in imports
- **Missing packages**: Ensure proper categorization in packages.nix
- **Import errors**: Verify `default.nix` exists for all folders

## Home Manager Patterns

### Program Configuration
```nix
programs.your-program = {
  enable = true;
  settings = {
    key = "value";
  };
};
```

### File Management
```nix
home.file.".config/your-app/config" = {
  source = ./config/your-app-config;
};
```

### Environment Variables
```nix
home.sessionVariables = {
  YOUR_VAR = "value";
};
```

## Best Practices

1. **Always test with `--dry-run` first**
2. **Use emoji categories for package organization**
3. **Keep platform-specific code in platform folders**
4. **Document complex configurations with comments**
5. **Use SOPS for any sensitive data**
6. **Follow the two-layer import rule consistently**
7. **Prefer Home Manager over system-level when possible**

## Emergency Recovery

If configuration breaks:
```bash
# Rollback to previous generation
sudo darwin-rebuild --rollback

# Check available generations
sudo nix-env --list-generations --profile /nix/var/nix/profiles/system
```

## File Modification Guidelines

- **flake.nix**: Only modify for new inputs or system additions
- **packages.nix**: Add new cross-platform CLI tools
- **darwin/packages.nix**: Add new macOS GUI applications
- **linux/packages.nix**: Add new Linux applications (when using Linux)
- **features/default.nix**: Add imports for new feature modules
- **hosts/zoidberg/**: Modify system-level macOS settings

Remember: This is a living configuration. Always test changes and maintain the clean architecture that makes it cross-platform and maintainable. 